#!/usr/bin/env python3
"""
Script x·ª≠ l√Ω database cho file ƒëi·ªÉm sinh vi√™n
Y√™u c·∫ßu:
1. T·∫°o c·∫•u tr√∫c l∆∞u d·ªØ li·ªáu SQL
2. Truy v·∫•n l·ªçc sinh vi√™n l·ªõp 14, ƒëi·ªÉm TB >= 3.4
"""

import sqlite3
import pandas as pd
import os
import re
from datetime import datetime

class StudentDatabaseProcessor:
    def __init__(self, db_name="student_scores.db"):
        """Kh·ªüi t·∫°o database processor"""
        self.db_name = db_name
        self.conn = None
        
    def connect_database(self):
        """K·∫øt n·ªëi t·ªõi database"""
        try:
            self.conn = sqlite3.connect(self.db_name)
            print(f"[check-circle] ƒê√£ k·∫øt n·ªëi database: {self.db_name}")
            return True
        except Exception as e:
            print(f"[x-circle] L·ªói k·∫øt n·ªëi database: {e}")
            return False
    
    def create_tables(self):
        """T·∫°o c·∫•u tr√∫c b·∫£ng SQL"""
        
        if not self.conn:
            print("[x-circle] Ch∆∞a k·∫øt n·ªëi database!")
            return False
            
        try:
            cursor = self.conn.cursor()
            
            # T·∫°o b·∫£ng sinh vi√™n ch√≠nh
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS students (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    stt INTEGER,
                    ma_sinh_vien TEXT UNIQUE NOT NULL,
                    ho_dem TEXT,
                    ten TEXT,
                    gioi_tinh TEXT,
                    ngay_sinh DATE,
                    lop TEXT,
                    so_mh_dang_ky INTEGER,
                    so_tc_dang_ky INTEGER,
                    so_mh_dat INTEGER,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # T·∫°o b·∫£ng ƒëi·ªÉm h·ªçc k·ª≥
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS semester_scores (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    ma_sinh_vien TEXT,
                    diem_10 REAL,
                    diem_4 REAL,
                    diem_chu TEXT,
                    xep_loai_hoc_luc TEXT,
                    diem_ren_luyen INTEGER,
                    xep_loai_ren_luyen TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (ma_sinh_vien) REFERENCES students (ma_sinh_vien)
                )
            ''')
            
            # T·∫°o b·∫£ng ƒëi·ªÉm t√≠ch l≈©y
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS cumulative_scores (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    ma_sinh_vien TEXT,
                    diem_10_tich_luy REAL,
                    diem_4_tich_luy REAL,
                    diem_chu_tich_luy TEXT,
                    xep_loai_tich_luy TEXT,
                    xep_hang TEXT,
                    nam_thu INTEGER,
                    so_tc_tich_luy INTEGER,
                    diem_ren_luyen_tich_luy INTEGER,
                    xep_loai_ren_luyen_tich_luy TEXT,
                    ghi_chu TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (ma_sinh_vien) REFERENCES students (ma_sinh_vien)
                )
            ''')
            
            self.conn.commit()
            print("[check-circle] ƒê√£ t·∫°o th√†nh c√¥ng c·∫•u tr√∫c database!")
            print("[clipboard] C√°c b·∫£ng ƒë√£ t·∫°o:")
            print("   ‚Ä¢ students: Th√¥ng tin sinh vi√™n")
            print("   ‚Ä¢ semester_scores: ƒêi·ªÉm h·ªçc k·ª≥")
            print("   ‚Ä¢ cumulative_scores: ƒêi·ªÉm t√≠ch l≈©y")
            
            return True
            
        except Exception as e:
            print(f"[x-circle] L·ªói t·∫°o b·∫£ng: {e}")
            return False
    
    def parse_csv_data(self, csv_file_path):
        """Ph√¢n t√≠ch v√† l√†m s·∫°ch d·ªØ li·ªáu CSV"""
        
        print(f"üìñ ƒêang ƒë·ªçc file: {csv_file_path}")
        
        try:
            # ƒê·ªçc file CSV v·ªõi dtype ƒë·ªÉ gi·ªØ m√£ sinh vi√™n d·∫°ng string
            df = pd.read_csv(csv_file_path, encoding='utf-8', dtype={'M√£ sinh vi√™n': str})
            
            print(f"[clipboard] Columns trong file: {len(df.columns)} c·ªôt")
            print(f"[bar-chart] Shape: {df.shape}")
            
            # Lo·∫°i b·ªè c√°c d√≤ng tr·ªëng
            df = df.dropna(subset=['M√£ sinh vi√™n'])
            
            # Convert m√£ sinh vi√™n v·ªÅ d·∫°ng string v√† l√†m s·∫°ch
            df['M√£ sinh vi√™n'] = df['M√£ sinh vi√™n'].astype(str)
            
            # L√†m s·∫°ch d·ªØ li·ªáu - ch·ªâ gi·ªØ c√°c d√≤ng c√≥ m√£ sinh vi√™n h·ª£p l·ªá (10 ch·ªØ s·ªë)
            df = df[df['M√£ sinh vi√™n'].str.match(r'^\d{10}$')]
            
            print(f"[check-circle] ƒê√£ ƒë·ªçc {len(df)} records h·ª£p l·ªá")
            
            # In m·ªôt v√†i m·∫´u ƒë·ªÉ ki·ªÉm tra
            if len(df) > 0:
                print("[clipboard] M·∫´u d·ªØ li·ªáu:")
                for i in range(min(3, len(df))):
                    row = df.iloc[i]
                    print(f"  {row['M√£ sinh vi√™n']} - {row['H·ªç ƒë·ªám']} {row['T√™n']} - L·ªõp: {row['L·ªõp']}")
            
            return df
            
        except Exception as e:
            print(f"[x-circle] L·ªói ƒë·ªçc CSV: {e}")
            return None
    
    def clean_numeric_data(self, value):
        """L√†m s·∫°ch d·ªØ li·ªáu s·ªë"""
        if pd.isna(value) or value == '' or value == ' ':
            return None
        try:
            return float(str(value).strip())
        except:
            return None
    
    def clean_text_data(self, value):
        """L√†m s·∫°ch d·ªØ li·ªáu text"""
        if pd.isna(value):
            return None
        return str(value).strip()
    
    def insert_data(self, df):
        """Ch√®n d·ªØ li·ªáu v√†o database"""
        
        if not self.conn or df is None:
            print("[x-circle] Kh√¥ng th·ªÉ insert d·ªØ li·ªáu!")
            return False
        
        try:
            cursor = self.conn.cursor()
            inserted_count = 0
            
            print("[save] B·∫Øt ƒë·∫ßu insert d·ªØ li·ªáu...")
            print(f"[clipboard] Columns available: {list(df.columns)}")
            
            # Map columns d·ª±a tr√™n index v√¨ c√≥ unnamed columns
            expected_cols = ['STT', 'M√£ sinh vi√™n', 'H·ªç ƒë·ªám', 'T√™n', 'Gi·ªõi t√≠nh', 'Ng√†y sinh', 'L·ªõp', 
                           'S·ªë MH ƒëƒÉng k√Ω', 'S·ªë TC ƒëƒÉng k√Ω', 'S·ªë MH ƒë·∫°t']
            
            # ƒêi·ªÉm h·ªçc k·ª≥ ·ªü columns 10-15
            semester_score_cols = [10, 11, 12, 13, 14, 15]  # ƒêi·ªÉm 10, ƒêi·ªÉm 4, ƒêi·ªÉm ch·ªØ, X·∫øp lo·∫°i, ƒêi·ªÉm r√®n luy·ªán, X·∫øp lo·∫°i r√®n luy·ªán
            
            # ƒêi·ªÉm t√≠ch l≈©y ·ªü columns 16-25  
            cumulative_score_cols = [16, 17, 18, 19, 20, 21, 22, 23, 24, 25]  # ƒêi·ªÉm 10, ƒêi·ªÉm 4, ƒêi·ªÉm ch·ªØ, X·∫øp lo·∫°i, X·∫øp h·∫°ng, NƒÉm th·ª©, S·ªë TC, ƒêi·ªÉm r√®n luy·ªán, X·∫øp lo·∫°i r√®n luy·ªán, Ghi ch√∫
            
            for index, row in df.iterrows():
                try:
                    ma_sv = self.clean_text_data(row['M√£ sinh vi√™n'])
                    if not ma_sv:
                        continue
                    
                    # Insert v√†o b·∫£ng students
                    cursor.execute('''
                        INSERT OR REPLACE INTO students 
                        (stt, ma_sinh_vien, ho_dem, ten, gioi_tinh, ngay_sinh, lop, 
                         so_mh_dang_ky, so_tc_dang_ky, so_mh_dat)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        self.clean_numeric_data(row['STT']),
                        ma_sv,
                        self.clean_text_data(row['H·ªç ƒë·ªám']),
                        self.clean_text_data(row['T√™n']),
                        self.clean_text_data(row['Gi·ªõi t√≠nh']),
                        self.clean_text_data(row['Ng√†y sinh']),
                        self.clean_text_data(row['L·ªõp']),
                        self.clean_numeric_data(row['S·ªë MH ƒëƒÉng k√Ω']),
                        self.clean_numeric_data(row['S·ªë TC ƒëƒÉng k√Ω']),
                        self.clean_numeric_data(row['S·ªë MH ƒë·∫°t'])
                    ))
                    
                    # Insert v√†o b·∫£ng semester_scores - d√πng index v√¨ c√≥ unnamed columns
                    cursor.execute('''
                        INSERT OR REPLACE INTO semester_scores 
                        (ma_sinh_vien, diem_10, diem_4, diem_chu, xep_loai_hoc_luc, 
                         diem_ren_luyen, xep_loai_ren_luyen)
                        VALUES (?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        ma_sv,
                        self.clean_numeric_data(row.iloc[10]),  # ƒêi·ªÉm 10
                        self.clean_numeric_data(row.iloc[11]),  # ƒêi·ªÉm 4
                        self.clean_text_data(row.iloc[12]),     # ƒêi·ªÉm ch·ªØ
                        self.clean_text_data(row.iloc[13]),     # X·∫øp lo·∫°i
                        self.clean_numeric_data(row.iloc[14]),  # ƒêi·ªÉm r√®n luy·ªán
                        self.clean_text_data(row.iloc[15])      # X·∫øp lo·∫°i r√®n luy·ªán
                    ))
                    
                    # Insert v√†o b·∫£ng cumulative_scores
                    cursor.execute('''
                        INSERT OR REPLACE INTO cumulative_scores 
                        (ma_sinh_vien, diem_10_tich_luy, diem_4_tich_luy, diem_chu_tich_luy, 
                         xep_loai_tich_luy, xep_hang, nam_thu, so_tc_tich_luy, 
                         diem_ren_luyen_tich_luy, xep_loai_ren_luyen_tich_luy, ghi_chu)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    ''', (
                        ma_sv,
                        self.clean_numeric_data(row.iloc[16]),  # ƒêi·ªÉm 10 t√≠ch l≈©y
                        self.clean_numeric_data(row.iloc[17]),  # ƒêi·ªÉm 4 t√≠ch l≈©y
                        self.clean_text_data(row.iloc[18]),     # ƒêi·ªÉm ch·ªØ t√≠ch l≈©y
                        self.clean_text_data(row.iloc[19]),     # X·∫øp lo·∫°i t√≠ch l≈©y
                        self.clean_text_data(row.iloc[20]),     # X·∫øp h·∫°ng
                        self.clean_numeric_data(row.iloc[21]),  # NƒÉm th·ª©
                        self.clean_numeric_data(row.iloc[22]),  # S·ªë TC t√≠ch l≈©y
                        self.clean_numeric_data(row.iloc[23]),  # ƒêi·ªÉm r√®n luy·ªán t√≠ch l≈©y
                        self.clean_text_data(row.iloc[24]),     # X·∫øp lo·∫°i r√®n luy·ªán t√≠ch l≈©y
                        self.clean_text_data(row.iloc[25])      # Ghi ch√∫
                    ))
                    
                    inserted_count += 1
                    
                    if inserted_count % 100 == 0:
                        print(f"ƒê√£ insert: {inserted_count} records...")
                        
                except Exception as e:
                    print(f"[alert-triangle] L·ªói insert record {ma_sv}: {e}")
                    continue
            
            self.conn.commit()
            print(f"[check-circle] ƒê√£ insert th√†nh c√¥ng {inserted_count} records!")
            return True
            
        except Exception as e:
            print(f"[x-circle] L·ªói insert d·ªØ li·ªáu: {e}")
            return False
    
    def query_class_14_gpa_above_34(self):
        """Truy v·∫•n sinh vi√™n l·ªõp 14, ƒëi·ªÉm TB >= 3.4"""
        
        if not self.conn:
            print("[x-circle] Ch∆∞a k·∫øt n·ªëi database!")
            return None
        
        try:
            print("[search] TRUY V·∫§N SINH VI√äN L·ªöP CH·ª®A '14', ƒêI·ªÇM TB >= 3.4")
            print("=" * 60)
            
            # Tr∆∞·ªõc ti√™n, ki·ªÉm tra c√°c l·ªõp c√≥ s·∫µn
            cursor = self.conn.cursor()
            cursor.execute("SELECT DISTINCT lop FROM students ORDER BY lop")
            all_classes = cursor.fetchall()
            
            print("üìö C√°c l·ªõp c√≥ trong database:")
            class_14_list = []
            for (lop,) in all_classes:
                if lop and '14' in str(lop):
                    class_14_list.append(lop)
                    print(f"  ‚úì {lop}")
                else:
                    print(f"    {lop}")
            
            if not class_14_list:
                print("[x-circle] Kh√¥ng t√¨m th·∫•y l·ªõp n√†o ch·ª©a '14'!")
                return []
            
            print(f"\nüéØ T√¨m th·∫•y {len(class_14_list)} l·ªõp ch·ª©a '14'")
            
            query = '''
                SELECT DISTINCT
                    s.ma_sinh_vien,
                    s.ho_dem,
                    s.ten,
                    s.lop,
                    cs.diem_4_tich_luy as diem_trung_binh,
                    cs.xep_loai_tich_luy,
                    cs.so_tc_tich_luy,
                    cs.ghi_chu
                FROM students s
                JOIN cumulative_scores cs ON s.ma_sinh_vien = cs.ma_sinh_vien
                WHERE (s.lop LIKE '%14%' OR s.lop LIKE '%14DHBM%' OR s.lop LIKE '%DHBM14%')
                    AND cs.diem_4_tich_luy >= 3.4
                    AND cs.diem_4_tich_luy IS NOT NULL
                ORDER BY cs.diem_4_tich_luy DESC, s.ma_sinh_vien
            '''
            
            cursor.execute(query)
            results = cursor.fetchall()
            
            if results:
                print(f"[check-circle] T√¨m th·∫•y {len(results)} sinh vi√™n th·ªèa m√£n ƒëi·ªÅu ki·ªán:")
                print()
                
                # In header
                print(f"{'STT':<4} {'M√£ SV':<12} {'H·ªç T√™n':<30} {'L·ªõp':<15} {'ƒêTB':<6} {'X·∫øp Lo·∫°i':<15} {'TC':<4} {'Ghi Ch√∫':<20}")
                print("-" * 110)
                
                # In t·ª´ng record
                for i, row in enumerate(results, 1):
                    ma_sv, ho_dem, ten, lop, dtb, xep_loai, tc, ghi_chu = row
                    ho_ten = f"{ho_dem or ''} {ten or ''}".strip()
                    
                    print(f"{i:<4} {ma_sv:<12} {ho_ten:<30} {lop:<15} {dtb:<6.2f} {xep_loai or '':<15} {tc or 0:<4} {ghi_chu or '':<20}")
                
                # Th·ªëng k√™
                print(f"\nüìä TH·ªêNG K√ä:")
                print(f"‚Ä¢ T·ªïng s·ªë sinh vi√™n th·ªèa m√£n: {len(results)}")
                
                # Ph√¢n b·ªë theo l·ªõp
                class_stats = {}
                for row in results:
                    lop = row[3]
                    class_stats[lop] = class_stats.get(lop, 0) + 1
                
                print("‚Ä¢ Ph√¢n b·ªë theo l·ªõp:")
                for lop, count in sorted(class_stats.items()):
                    print(f"  - {lop}: {count} sinh vi√™n")
                
                # ƒêi·ªÉm trung b√¨nh cao nh·∫•t, th·∫•p nh·∫•t
                scores = [row[4] for row in results if row[4] is not None]
                if scores:
                    print(f"‚Ä¢ ƒêi·ªÉm TB cao nh·∫•t: {max(scores):.2f}")
                    print(f"‚Ä¢ ƒêi·ªÉm TB th·∫•p nh·∫•t: {min(scores):.2f}")
                    print(f"‚Ä¢ ƒêi·ªÉm TB trung b√¨nh: {sum(scores)/len(scores):.2f}")
                
                return results
                
            else:
                print("[x-circle] Kh√¥ng t√¨m th·∫•y sinh vi√™n n√†o th·ªèa m√£n ƒëi·ªÅu ki·ªán!")
                return []
                
        except Exception as e:
            print(f"[x-circle] L·ªói truy v·∫•n: {e}")
            return None
    
    def export_query_results(self, results, output_file="query_results.csv"):
        """Export k·∫øt qu·∫£ query ra CSV"""
        
        if not results:
            print("[x-circle] Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ export!")
            return False
        
        try:
            # T·∫°o DataFrame
            df = pd.DataFrame(results, columns=[
                'M√£ Sinh Vi√™n', 'H·ªç ƒê·ªám', 'T√™n', 'L·ªõp', 
                'ƒêi·ªÉm TB', 'X·∫øp Lo·∫°i', 'TC T√≠ch L≈©y', 'Ghi Ch√∫'
            ])
            
            # T·∫°o c·ªôt h·ªç t√™n ƒë·∫ßy ƒë·ªß
            df['H·ªç T√™n'] = (df['H·ªç ƒê·ªám'].fillna('') + ' ' + df['T√™n'].fillna('')).str.strip()
            
            # S·∫Øp x·∫øp l·∫°i c·ªôt
            df = df[['M√£ Sinh Vi√™n', 'H·ªç T√™n', 'L·ªõp', 'ƒêi·ªÉm TB', 'X·∫øp Lo·∫°i', 'TC T√≠ch L≈©y', 'Ghi Ch√∫']]
            
            # Export
            df.to_csv(output_file, index=False, encoding='utf-8')
            print(f"[check-circle] ƒê√£ export k·∫øt qu·∫£ ra: {output_file}")
            
            return True
            
        except Exception as e:
            print(f"[x-circle] L·ªói export: {e}")
            return False
    
    def show_database_stats(self):
        """Hi·ªÉn th·ªã th·ªëng k√™ database"""
        
        if not self.conn:
            print("[x-circle] Ch∆∞a k·∫øt n·ªëi database!")
            return
        
        try:
            cursor = self.conn.cursor()
            
            print("\nüìä TH·ªêNG K√ä DATABASE:")
            print("=" * 40)
            
            # ƒê·∫øm sinh vi√™n
            cursor.execute("SELECT COUNT(*) FROM students")
            student_count = cursor.fetchone()[0]
            print(f"‚Ä¢ T·ªïng s·ªë sinh vi√™n: {student_count:,}")
            
            # ƒê·∫øm theo l·ªõp ch·ª©a 14
            cursor.execute("""
                SELECT lop, COUNT(*) 
                FROM students 
                WHERE lop LIKE '%14%' OR lop LIKE '%14DHBM%' OR lop LIKE '%DHBM14%'
                GROUP BY lop 
                ORDER BY lop
            """)
            class_14_stats = cursor.fetchall()
            
            print(f"‚Ä¢ Sinh vi√™n l·ªõp ch·ª©a '14':")
            total_class_14 = 0
            for lop, count in class_14_stats:
                print(f"  - {lop}: {count} sinh vi√™n")
                total_class_14 += count
            print(f"  T·ªîNG: {total_class_14} sinh vi√™n")
            
            # ƒê·∫øm sinh vi√™n c√≥ ƒëi·ªÉm >= 3.4
            cursor.execute("""
                SELECT COUNT(*) 
                FROM cumulative_scores 
                WHERE diem_4_tich_luy >= 3.4
            """)
            good_students = cursor.fetchone()[0]
            print(f"‚Ä¢ Sinh vi√™n c√≥ ƒêTB >= 3.4: {good_students}")
            
            # Hi·ªÉn th·ªã m·ªôt v√†i l·ªõp m·∫´u
            cursor.execute("SELECT DISTINCT lop FROM students LIMIT 10")
            sample_classes = cursor.fetchall()
            print(f"‚Ä¢ M·∫´u c√°c l·ªõp trong DB:")
            for (lop,) in sample_classes:
                print(f"  - {lop}")
            
        except Exception as e:
            print(f"[x-circle] L·ªói th·ªëng k√™: {e}")
    
    def close_connection(self):
        """ƒê√≥ng k·∫øt n·ªëi database"""
        if self.conn:
            self.conn.close()
            print("[check-circle] ƒê√£ ƒë√≥ng k·∫øt n·ªëi database")

def main():
    """H√†m ch√≠nh"""
    
    print("[database] SCRIPT X·ª¨ L√ù DATABASE ƒêI·ªÇM SINH VI√äN")
    print("=" * 50)
    
    # Kh·ªüi t·∫°o processor
    processor = StudentDatabaseProcessor()
    
    # K·∫øt n·ªëi database
    if not processor.connect_database():
        return
    
    # T·∫°o c·∫•u tr√∫c b·∫£ng
    if not processor.create_tables():
        processor.close_connection()
        return
    
    # ƒê∆∞·ªùng d·∫´n file CSV
    csv_file = "/Users/nguyenhuuthang/Documents/Data/huit_data_point.csv"
    
    if not os.path.exists(csv_file):
        print(f"[x-circle] Kh√¥ng t√¨m th·∫•y file: {csv_file}")
        processor.close_connection()
        return
    
    # ƒê·ªçc v√† insert d·ªØ li·ªáu
    df = processor.parse_csv_data(csv_file)
    if df is not None:
        if processor.insert_data(df):
            print("[check-circle] Ho√†n th√†nh vi·ªác import d·ªØ li·ªáu!")
        else:
            print("[x-circle] L·ªói import d·ªØ li·ªáu!")
            processor.close_connection()
            return
    else:
        processor.close_connection()
        return
    
    # Hi·ªÉn th·ªã th·ªëng k√™
    processor.show_database_stats()
    
    # Th·ª±c hi·ªán truy v·∫•n ch√≠nh
    print("\n" + "="*60)
    results = processor.query_class_14_gpa_above_34()
    
    # Export k·∫øt qu·∫£
    if results:
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"sinh_vien_lop14_dtb_tren_3.4_{timestamp}.csv"
        processor.export_query_results(results, output_file)
    
    # ƒê√≥ng k·∫øt n·ªëi
    processor.close_connection()
    
    print("\nüéâ HO√ÄN TH√ÄNH!")

if __name__ == "__main__":
    main()
